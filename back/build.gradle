/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'

    id 'war'
    id 'ear'
    id 'eclipse'
    id 'eclipse-wtp'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
   compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.25.1'
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.0-jre'
   // compile group: 'javax.ejb', name: 'javax.ejb-api', version: '3.2'
    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

application {
    // Define the main class for the application.
    mainClassName = 'su.fontru.App'
}

war { 
  from 'src/main/java' 
  webXml = file('src/main/WEB-INF/web.xml')
}

ear {
  appDirName 'src/main/java'
  libDirName ''
  deploymentDescriptor {  // custom entries for application.xml:
//      fileName = "application.xml"  // same as the default value
//      version = "6"  // same as the default value
        applicationName = "ejbTest"
        initializeInOrder = true
        displayName = "EJB TEST"  // defaults to project.name
        // defaults to project.description if not set
        description = "EJB de teste"
//      libraryDirectory = "APP-INF/lib"  // not needed, above libDirName setting does this
//      module("my.jar", "java")  // won't deploy as my.jar isn't deploy dependency
//      webModule("my.war", "/")  // won't deploy as my.war isn't deploy dependency
        /*
        securityRole "admin"
        securityRole "superadmin"
        */
        /*
        withXml { provider -> // add a custom node to the XML
            provider.asNode().appendNode("data-source", "my/data/source")
        }
        */
  }

}
